problem - https://www.spoj.com/problems/ACODE/

idea - at any position we can take next 1 or 2 elements checking its value. 
       also dont repeat the same subproblem
       so use dp
       at any position 'i', if dp[i] is already calc use it
       we can see that no other constraint other than pos is there
       so only 1d dp.

code - recursive

bool valid(int i) {
    int val = 10*(s[i]-'0') + (s[i+1]-'0');
    return (val >= 10 and val <= 26);
}

ll decoding(int i, int n) {
    if(i == n) {
        return 1;
    }
    if(dp[i] != -1) {
        return dp[i];
    }
    
    //edge case
    if(s[i] == '0')
        return 0;
        
    // next1
    dp[i] = decoding(i+1, n);
    
    //next2
    if(i < n-1 and valid(i)) {
        dp[i] += decoding(i+2, n);
    }
    
    return dp[i];
}

void solve() {
    while(true) {
        cin >> s;
        int n = s.length();
        if(s == "0") break;
        dp  = vt<ll> (n, -1);
        cout << decoding(0, n) << nl;
    }
}
