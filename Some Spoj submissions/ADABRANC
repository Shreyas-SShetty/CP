QSt - http://www.spoj.com/problems/ADABRANC/

Code - 
//#pragma GCC optimize "trapv"
//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")
//#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>
using namespace std;

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//find_by_order(k)  returns iterator to kth element starting from 0;
//order_of_key(k) returns count of elements strictly smaller than k;
//erase,insert same as normal set

//#define      ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)
#define        intmax    INT_MAX
#define        intmin    INT_MIN
#define        nl        "\n"
#define        prt(val)  cout<<val<<"\n"
#define        all(v)    v.begin(),v.end()
#define        vt        vector
#define        trace1(x)                cerr<<#x<<": "<<x<<endl
#define        trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define        trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define        trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define        trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define        trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

typedef       long long int ll;
typedef       long double LD;
typedef       unsigned long long int LL;
typedef       pair<int,int> pii;
typedef       pair<long long int,int> pli;
typedef       pair<int,long long int> pil;
typedef       pair<long long int,long long int> pll;
const int N=1e5+5;
const int mod=1e9+7;
//mt19937 rnd(time(NULL));

/*------Global--------*/
vt<int> parent(N);
vt<int> siz(N);
/*-----Functions------*/

inline int add(int a, int b) { int ret=((ll)a+b)%mod; if(ret<0) ret+=mod; return ret; }
inline int mul(int a, int b) { int ret=((ll)a*b)%mod; if(ret<0) ret+=mod; return ret; }
template<typename... Args>
inline int add(int a, Args... args) { return add(a, add(args...)); }
template<typename... Args>
inline int mul(int a, Args... args) { return mul(a, mul(args...)); }
inline int addm(int a, int b, int MOD) { int ret=((ll)a+b)%MOD; if(ret<0) ret+=MOD; return ret; }
inline int mulm(int a, int b, int MOD) { int ret=((ll)a*b)%MOD; if(ret<0) ret+=MOD; return ret; }
inline int addm(int a, int b, int c, int MOD) { return addm(a, addm(b, c, MOD), MOD); }
inline int mulm(int a, int b, int c, int MOD) { return mulm(a, mulm(b, c, MOD), MOD); }

template<typename T>
void show2d(const vector<vector<T>>& adj)
{
    for(auto x:adj)
    {
        for(auto y:x)
        { 
           cout<<y<<" ";
        }
    cout<<"\n";
    }
}

ll modexp(ll a,ll b,ll mod)
{
    ll x=1;
    while(b)
    {
        if(b&1)
        x = ((x%mod) * (a%mod))%mod;
        a = ((a%mod) * (a%mod))%mod;
        b = b / 2;
    }
    return x;
}

bool ispalindrome(ll n)
{
    ll rev=0,n1=n;
    while(n1>0)
    {
       rev=rev*10+n1%10;
       n1/=10;
    }
    return (n==rev);
}

void rf()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
}

void preprocess() {
    for(int i =0 ; i<N; ++i)
        parent[i] = i;
    for(int i =0; i<N; ++i)
        siz[i] = 1;
}

int findParent(int node) {
    while(node != parent[node]) {
        parent[node] = parent[parent[node]];
        node = parent[node];
    }
    return node;
}

void join(int a, int b) {
    int pa = findParent(a);
    int pb = findParent(b);
    if(pa == pb)
        return;
    if(siz[pa] >= siz[pb]) {
        siz[pa] += siz[pb];
        parent[pb] = pa;
    }
    else {
        siz[pb] += siz[pa];
        parent[pa] = pb;
    }
}

void solve() {
    int n,m,q;
    cin>>n>>m>>q;
    vt<pair<int, pii> >edges(m);
    for(auto &it: edges)
        cin>>it.s.f>>it.s.s>>it.f;
    sort(all(edges));
    reverse(all(edges));
    vt<pair<int, pii> >query(q);
    for(auto &it: query)
        cin>>it.s.f>>it.f;
    for(int i =0 ; i<q; ++i)
        query[i].s.s = i;
    sort(query.rbegin(), query.rend());
    vt<int> answer (q);
    int j = 0;
    for(int i=0; i<q; ++i) {
        int cur = query[i].f;
        while(j < m && edges[j].f >= cur) {
            join(edges[j].s.f, edges[j].s.s);
            ++j;
        }
        answer[query[i].s.s] = siz[findParent(query[i].s.f)];
    }
    for(int i = 0; i < q; ++i) 
        cout<<answer[i]<<nl;
}

int32_t main()
{
    fast;
    //cin.exceptions(cin.failbit);
    rf();
    //w(t) 
    {
        preprocess();
        solve();
    }
}
