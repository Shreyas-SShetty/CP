Problem link - https://codeforces.com/problemset/problem/638/C

Idea - DFS + Greedy

Code - 

#include<bits/stdc++.h>
using namespace std;

#pragma GCC optimize("-Ofast")

//#define      ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define        fast               ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        ff                 first
#define        ss                 second
#define        show(b)            for(auto const&x: b) cout<<x<<" "
#define        endl               "\n"
#define        vt                 vector

typedef       long long int ll;
typedef       long double LD;
typedef       pair<int,int> pii;
typedef       pair<long long int,long long int> pll;
const int N=1e5+5;
const int mod=1e9+7;
//mt19937 rnd(time(NULL));

/*------Global--------*/
vt<vt<pll> >adj;
vt<vt<ll> >repair;
/*-----Functions------*/

ll modexp(ll a,ll b,ll mod) {
    ll x=1;
    while(b)
    {
        if(b&1) x = ((x%mod) * (a%mod))%mod;
        a = ((a%mod) * (a%mod))%mod;
        b = b / 2;
    }
    return x;
}

void rf() {
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif 
}

void dfs(ll node, ll par, ll arrival_time) {
    ll time = 0;
    for(auto x: adj[node]) {
        if(x.ff != par) {
            ++time;
            if(time == arrival_time)
                ++time;
            repair[time].push_back(x.ss);
            dfs(x.ff, node, time);
        }
    }
}

void solve() {
    ll n;
    cin >> n;
    adj = vt<vt<pll> >(n+1);
    repair = vt<vt<ll> >(2 * n);
    for(int i = 0; i < n-1; ++i) {
        ll v1, v2;
        cin >> v1 >> v2;
        adj[v1].push_back({v2, i+1});
        adj[v2].push_back({v1, i+1});
    }
    dfs(1, -1, -1);
    // cout << repair.size() << endl;
    int non_empty = 0;
    for(auto x: repair) {
        non_empty += (!x.empty());
    }
    cout << non_empty << endl;
    for(int i = 1; i <= n; ++i) {
        if(!repair[i].empty()) {
            cout << repair[i].size() << " ";
            for(auto x: repair[i])
                cout << x << " ";
            cout << endl;
        }
    }
}

int32_t main()
{
    fast;
    //cin.exceptions(cin.failbit);
   // rf();
    int t = 1;
    // cin >> t;
    while(t--)
    {
        solve();
    }
}
