Template : 

class TreeAncestor {
public:
    vector<vector<int> >up;
    int depth;
    vector<int> dist;
    
    TreeAncestor(int n, vector<int>& parent) {
        depth = ceil(log2(n));
        parent[0] = 0;
        dist = vector<int>(n);
        dist[0] = 0;
        up = vector<vector<int> >(n, vector<int>(depth+1));
        for(int i = 0; i < n; ++i) {
            up[i][0] = parent[i];
            if(i > 0)
                dist[i] = dist[parent[i]] + 1;
            for(int j = 1; j <= depth; ++j) {
                up[i][j] = up[up[i][j-1]][j-1];
            }
        }
        // swap two for loops if parent of a node is greater than the node.
    }
    
    int getKthAncestor(int node, int k) {
        if(dist[node] < k)
            return -1;
        int depth = dist[node];
        depth = ceil(log2(depth));
        while(depth >= 0) {
            if(pow(2, depth) < k) {
                node = up[node][depth];
                k -= pow(2, depth);
            }
            --depth;
        }
        return up[node][0];
    }
};
