Spanning Tree - A subgraph of a graph containing n vertices and n-1 edges and containing no cycles.
MSP - A spanning tree whose cost is minimum.

Intuition
Unlike Kruskals algorithm we keep adding vertices one by one
So it is clear that we need to sort the cost along with one vertex.
We can make use of a priority queue. because sorting can be done in O(logn) and insertion and deletion in O(1).

Time complexity-
O(ElogV + VlogV) == O(ElogV)
internal sorting takes logV in the pq;

Space complexity
O(E+V)

Code==

//#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;
// erase,insert same as normal set

//#define        ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        pii pair<int,int>
#define        pli pair<long,int>
#define        pil pair<int,long>
#define        pll pair<long,long>
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)
#define        mx(a,b,c) max(a,max(b,c))
#define        mn(a,b,c) min(a,min(b,c))
#define        intmax    INT_MAX
#define        intmin    INT_MIN


typedef long long ll;
typedef long double LD;
typedef unsigned long long int LL;
const int N=1e5+5;
const int mod=1e9+7;
//mt19937 rnd(time(NULL));

//////////////////////////////////////////////////////////////
LL sum=0;
vector<vector<pii>> adj;
vector<bool>vis;

void rf()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
}

void Prims(int n)
{
    priority_queue<pii,vector<pii>,greater<pii>> qq;         //Stores the minimum element at the top 
    qq.push({0,n});                                          //Initially we store the first random vertex and then set the initial cost as 0.
    // vis[n] = true;
    while(!qq.empty())
    {
        pii top = qq.top();
        qq.pop();
        if(vis[top.second] == true)                          
            continue;
        vis[top.second] = true;                              // Mark it as visited in case of selfloops or cycles.
        sum += top.first;
        for(auto x:adj[top.second])             
        {
            if(vis[x.s] == false)
            qq.push({x.f,x.s});                              // We push the neighbours of a vertex into the pq , similar to dfs , but as we push inside it gets internally sorted.
        }
    }
}

int32_t main()
{
    fast;
    rf();
    int n,m;
    cin>>n>>m;
    adj = vector<vector<pii>>(n+1);
    vis = vector<bool>(n+1,false);
    for(int i=0;i<m;++i)
    {
        int a,b,cost;
        cin>>a>>b>>cost;
        adj[b].pb({cost,a});
        adj[a].pb({cost,b});
    }
    Prims(1);
    cout<<sum<<"\n";
}
