SPOJ - https://www.spoj.com/problems/NAJPF/

Time complexity : O(m+n) 

Code - 

void constructLPS(int n, string& pattern) {
    int i=0, j=1;
    while(j<n) {
        if(pattern[i] == pattern[j]) {
            lps[j] = i+1;
            ++i;
            ++j;
        }
        else {
            if(i == 0) {
                lps[j] = 0;
                ++j;
            }
            else {
                i = lps[i-1];
            }
        }
    }
}

vector<int> findSubstrings(string& pat, int m, string& txt, int n) {
    int j = 0;
    int i = 0;
    vector<int> ans;
    while(i<=n) {
        if(j == m) {
            ans.pb(i-m);
            j = lps[j-1];
            if(i == n)
                break;
        }
        if(pat[j] == txt[i]) {
            ++i;
            ++j;
        }
        else {
            if(j == 0) {
                ++i;
            }
            else {
                j = lps[j-1];
            }
        }
    }
    return ans;
}

int32_t main()
{
    fast;
    rf();
    w(t) {
        string text, pattern;
        cin>>text>>pattern;
        int n = text.size();
        int m = pattern.size();
        lps = vector<int> (m);
        lps[0] = 0;
        constructLPS(m, pattern);
        vector<int> num = findSubstrings(pattern, m, text, n);
        
        
        if(num.empty()) {
            cout<<"Not Found\n";
        }
        else{
            cout<<num.size()<<nl;
            for(auto x:num)
                cout<<x+1<<" ";
            cout<<nl;
        }
        cout<<nl;
    }
}


-----------------------------------------------------
-----------------------------------------------------

void lps_form() {
    int n = pattern.length();
    lps = vt<ll> (n, 0);
    lps[0] = 0;
    for(int i = 1; i < n; ++i) {
        int reach = lps[i-1];
        while(reach > 0 and pattern[i] != pattern[reach])
            reach = lps[reach-1];
        if(pattern[i] == pattern[reach])
            ++reach;
        lps[i] = reach;
    }
}
 
void solve() {
    cin >> text >> pattern;
    lps_form();
    ll n = text.length();
    ll m = pattern.length();
    ll i = 0, j = 0, cnt = 0;
    while(i < n) {
        while((i < n and j < m) and (text[i] == pattern[j])) {
            ++i;
            ++j;
        }
        if(j == m) {++cnt;}
        if(j == 0) ++i;
        if(j > 0)
            j = lps[j-1];
    }
    cout << cnt << endl;
}
