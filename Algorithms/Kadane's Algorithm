//#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
//#include<boost/multiprecision/cpp_int.hpp>


#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        pii pair<int,int>
#define        pli pair<long,int>
#define        pil pair<int,long>
#define        pll pair<long,long>
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)

using namespace std;
//using boost::multiprecision::cpp_int;


typedef long long ll;
typedef long double LD;
typedef unsigned long long int LL;
const int N=1e5+5;
const int mod=1e9+7;


void rf()
{
    #ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
    #endif
}

int kadane(int* a,int n)
{
	int curr = 0;
	int max_so_far = 0;
	int max_ele = INT_MIN; // To keep track of the smallest negative number when all numbers are negative.

	for(int i=0;i<n;++i)
	{
		max_ele = max(max_ele,a[i]); 
		curr = curr + a[i];
		if(curr<0)      //If at any index existing subarray sum becomes negative we start fresh from the next index
			curr = 0;
		max_so_far = max(max_so_far,curr);     //max_so_far stores whichever subarray sum is maximum globally.
	}
	if(max_so_far == 0)  //If all elements are negative then output the smallest negative number.
		max_so_far = max_ele;
	return max_so_far;
}


int32_t main()
{
	rf();
	fast;
    int a[] = {1,-3,2,1,-1};
    cout<<kadane(a,5)<<"\n";
}
