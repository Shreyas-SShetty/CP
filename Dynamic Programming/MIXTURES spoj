MIXTURES : Refer SPOJ or Google

Intuition -
Optimal mixing can be achieved by selecting an intermediate 'k' such that i....k and k+1......j are mixed. 
Firstly we need to find optimal solution for subproblems like mixing two,three and so on.
Then we need to fix the starting and ending points for subproblems.
Then iterate k over the starting and ending points.
[i..k] + [k+1..j] + smoke[i..k]*smoke[k+1...j]


Solution (Iterative)----

//#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;
// erase,insert same as normal set

//#define        ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)
#define        mx(a,b,c) max(a,max(b,c))
#define        mn(a,b,c) min(a,min(b,c))
#define        intmax    INT_MAX
#define        intmin    INT_MIN
#define        nl        cout<<"\n";
#define        prt(val)  cout<<val<<"\n";
#define        all(v)    v.begin(),v.end()

typedef       long long int ll;
typedef       long double LD;
typedef       unsigned long long int LL;
typedef       pair<int,int> pii;
typedef       pair<long long int,int> pli;
typedef       pair<int,long long int> pil;
typedef       pair<long long int,long long int> pll;
const int N=1e5+5;
const int mod=1e9+7;
//mt19937 rnd(time(NULL));

/*-----Functions------*/
void show2d(const vector<vector<int>>& adj)
{
    for(auto x:adj)
    {
        for(auto y:x)
        { 
           cout<<y<<" ";
        }
    cout<<"\n";
    }
}

ll modexp(ll a,ll b,ll mod)
{
    ll x=1;
    while(b)
    {
        if(b&1)
        x = ((x%mod) * (a%mod))%mod;
        a = ((a%mod) * (a%mod))%mod;
        b = b / 2;
    }
    return x;
}

void rf()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
}
-----------------------------------------Solution ---------------------------------------------------------
ll dp[200][200];
ll smoke[200][200];

int32_t main()
{
    fast;
    rf();
    int n;
    cin>>n;
    for(int i=0;i<=n;++i)
        for(int j=0;j<=n;++j)
            smoke[i][j] = 999999999999;
    for(int i=0;i<n;++i)
    {
        cin>>dp[i][i];
        smoke[i][i] = 0;
    }
    for(int l=2;l<=n;++l)
    {
        for(int i=0;i<=(n-l);++i)
        {
            int j = i+l-1;
            for(int k=i;k<j;++k)
            {
                ll cache = (dp[i][k] * dp[k+1][j]) + smoke[i][k] + smoke[k+1][j];            //At any cell, we need to add the smokes previously  generated and the current smoke generated.
                if(cache < smoke[i][j])
                {
                    smoke[i][j] = cache;
                    dp[i][j] =( dp[i][k] + dp[k+1][j] )%100;
                }
            }
        }
    }
    cout<<smoke[0][n-1]<<"\n";
}
