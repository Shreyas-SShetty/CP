Question - 

Given a string s and m queries . Each query consists of (l,r) where 1 <= l <= r <= n(size of string).

You need to print whether l to r is a palindromic string or not.

Intuition - 
-> Consider portion of string from pos i to j [i,j];
-> If str[i] == str[j] ,
   -> If str[i+1 ..... j-1] is a palindrome then , CurrentMax -> dp[i][j] = dp[i+1][j-1] + 2;
->Precompute the results for substrings of length 1 and 2.
->The portion left of the principal diagonal is not used  in computation.



Code - 

//#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
//#include<boost/multiprecision/cpp_int.hpp>


#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        eb emplace_back
#define        pii pair<int,int>
#define        pli pair<long,int>
#define        pil pair<int,long>
#define        pll pair<long,long>
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)

using namespace std;
//using boost::multiprecision::cpp_int;


typedef long long LL;
typedef long double LD;
const int N=1e5+5;
const int infi=1e9+7;

bool dp[1000][1000];

void rf()
{
    #ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
    #endif
}

void construct(string str)
{
	int n= str.length();
  int Max=1;
    for(int i=0;i<n;++i)
    	dp[i][i] = true;             // All substrings of length 1 are palindromic
    for(int i=0;(i+1)<n;++i) 
    	{
    		if(str[i] == str[i+1]){  //Check for length 2.
        dp[i][i+1] = true;
        Max = max(Max,2);
        }
    	}
    for(int l=3;l<=n;++l)
    {
    	for(int i=0,j=i+l-1;j<n;++j,++i)
    	{
    		if((str[i] == str[j]) && (dp[i+1][j-1] == true)){
             dp[i][j] = true;
             Max =max(Max,j-i+1);
        }
    	}
    }
}

int32_t main()
{
    fast;
    rf();
    int n,m;string str;
    cin>>n>>str>>m;
    memset(dp,false,sizeof(dp));
    construct(str);

    for(itn i=1;i<=m;++i)
    {
    	int a,b;
    	cin>>a>>b;
    	if(dp[a-1][b-1]==true)
    		cout<<"YES\n";
    	else
    		cout<<"NO\n";
    }
}
