Qst  - Given a range[ L, R ] find out the number of numbers that have '110' as a substring in their binary representation. 

Idea  - Brute force gives TLE.
        This problem is commutative. Ans = f(R) - f(L-1). 
        
        The states of the DP are the current position, upper bound of number(R), the previous two elements, present variable. 
        
        At any point if we were to take the memoized answer to any sub-problem, then it should be confirmed that the state of the DP should cover all possibilities of the
        future precomputation. In this case if we don't take upper bound into consideration, we might have calculated result beyond the limit or only along the limit and not inside.
        
        If we are position 'i' and we take the memoized solution at 'i', it means that answer for [i,n] has already been computed. But it makes a difference when 'i-1' and 'i-2' th
        element is '1' and 'i'th element is '0'. Hence '110' is formed. So, the result for [i,n] also depends whether the previous two elements form ones. 
        
        Finally, if there is  already such a substring then we need not worry about searching for it in the remaining digits. 
        
        
 Code - 

ll fun(int i, int n, string str, bool tight, bool p1, bool p2, bool there) {
    if(i == n) {
        if(there)
            return 1;
        return 0;
    }
    if(dp[i][p1][p2][tight][there] != -1)
        return dp[i][p1][p2][tight][there];
    int st = 0;
    int ed = tight? (str[i]-'0') : 1;
    ll ans=0;
    for(int j=st; j<=ed; ++j) {
        // ans += (p1 && p2 && (j==0));
        ans += fun(i+1, n, str, tight&&(j==(str[i]-'0')),(j==1), p1, there || (p1 && p2 && (j==0)));
    }
    return dp[i][p1][p2][tight][there] = ans;
}

string itob(ll n) {
    string ans;
    while(n>0) {
        char rem = n%2? '1' : '0';
        ans += string(1, rem);
        n /= 2;
    }
    reverse(all(ans));
    //cout<<ans<<nl;
    return ans;
}

void solve() {
    ll n1, n2;
    cin>>n1>>n2;
    s1 = itob(n1-1); //converting integer to binary. 
    s2 = itob(n2);
    s1 = string(s2.size()-s1.size(),'0') + s1;
    //cout<<s1<<" "<<s2<<nl;
    int n = s2.size();
    fix(dp,-1);
    ll a1 = fun(0,n,s1,1,0,0,0);
    fix(dp,-1);
    ll a2 = fun(0,n,s2,1,0,0,0);
    trace2(a1, a2);
    cout<<(a2-a1)<<nl;
}

int32_t main()
{
    fast;
    rf();
    w(t) 
    {
        solve();
    }
}
