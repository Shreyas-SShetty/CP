Qst - https://www.spoj.com/problems/DAGCNT2/

Accepted with bitsets, tle with dfs 
But time complexity is the same - O(n^2).


Intuition of using bitsets - At any node  instead of traversing entirely till the leaf node, we can just store the data of the remaining nodes in the immediate child node for a paritcular node. 
So start traversing from bottom to top (by topo sort) and then keep appending the child's data onto the parent. Now if two children meet a common grandchild node then this 
will be included twice. Hence we cannot use a dp array to store the data. Instead if we use bitsets then no matter how many times the same bit is set to 1 in any child node,
it will be included only once for a particular node. 

Code with bitsets - 

#include<bits/stdc++.h>
using namespace std;
 
#define        vt        vector
#define        w(t)     int t;cin>>t;while(t--)
#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        pb push_back
const int N = 20010;
 
vt<vt<int> >edges(N);
vt<int> cost(N);
vt<int> indegree(N);
vt<int> order;
bitset<N> reach[N];
int n,m;
 
void toposort() {
    queue<int> nodes;
    for(int i=1; i<=n; ++i) {
        if(indegree[i] == 0) {
            nodes.push(i);
        }
    }
    while(!nodes.empty()) {
        int tp = nodes.front();
        nodes.pop();
        order.pb(tp);
        for(auto x: edges[tp]) {
            indegree[x]--;
            if(indegree[x] == 0) {
                nodes.push(x);
            }
        }
    }
    // show(order);
    // cout<<nl;
}
 
 
void solve() {
    //int n,m;
    cin>>n>>m;
    for(int i=1 ; i<=n; ++i)
        cin>>cost[i];
    for(int i=1 ; i<=m; ++i) {
        int from, to;
        cin>>from>>to;
        edges[from].pb(to);
        ++indegree[to];
    }
    toposort();
    for(int i = n-1; i >= 0; --i) {
        reach[order[i]] = reach[order[i]].set(order[i]);
        for(auto x: edges[order[i]]) {
            reach[order[i]] |= reach[x];
        }
    }
    for(int i = 1; i<=n; ++i) {
        int ans = 0;
        for(int j = 1; j<=n; ++j) {
            if(reach[i][j]) {
                ans += cost[j];
            }
        }
        cout<<ans<<" ";
    }
    cout<<"\n";
    order.clear();
    for(int i=1; i<=n; ++i) {
        edges[i].clear();
        reach[i].reset();
    }
}
 
int main() {
    fast;
    w(t) {
        solve();
    }
} 


Code with dfs - -

//#pragma GCC optimize "trapv"
//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")
//#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>
using namespace std;

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//find_by_order(k)  returns iterator to kth element starting from 0;
//order_of_key(k) returns count of elements strictly smaller than k;
//erase,insert same as normal set

//#define      ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)
#define        intmax    INT_MAX
#define        intmin    INT_MIN
#define        nl        "\n"
#define        prt(val)  cout<<val<<"\n"
#define        all(v)    v.begin(),v.end()
#define        vt        vector
#define        trace1(x)                cerr<<#x<<": "<<x<<endl
#define        trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define        trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define        trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define        trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define        trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

typedef       long long int ll;
typedef       long double LD;
typedef       unsigned long long int LL;
typedef       pair<int,int> pii;
typedef       pair<long long int,int> pli;
typedef       pair<int,long long int> pil;
typedef       pair<long long int,long long int> pll;
const int N=1e5+5;
const int mod=1e9+7;
//mt19937 rnd(time(NULL));

/*------Global--------*/
vt<int> cost; 
vt<pii> outdegree;
vt<int> dp;
vt<vt<int> >edges;
bitset<N> vis;
/*-----Functions------*/

inline int add(int a, int b) { int ret=((ll)a+b)%mod; if(ret<0) ret+=mod; return ret; }
inline int mul(int a, int b) { int ret=((ll)a*b)%mod; if(ret<0) ret+=mod; return ret; }
template<typename... Args>
inline int add(int a, Args... args) { return add(a, add(args...)); }
template<typename... Args>
inline int mul(int a, Args... args) { return mul(a, mul(args...)); }
inline int addm(int a, int b, int MOD) { int ret=((ll)a+b)%MOD; if(ret<0) ret+=MOD; return ret; }
inline int mulm(int a, int b, int MOD) { int ret=((ll)a*b)%MOD; if(ret<0) ret+=MOD; return ret; }
inline int addm(int a, int b, int c, int MOD) { return addm(a, addm(b, c, MOD), MOD); }
inline int mulm(int a, int b, int c, int MOD) { return mulm(a, mulm(b, c, MOD), MOD); }

template<typename T>
void show2d(const vector<vector<T>>& adj)
{
    for(auto x:adj)
    {
        for(auto y:x)
        { 
           cout<<y<<" ";
        }
    cout<<"\n";
    }
}

ll modexp(ll a,ll b,ll mod)
{
    ll x=1;
    while(b)
    {
        if(b&1)
        x = ((x%mod) * (a%mod))%mod;
        a = ((a%mod) * (a%mod))%mod;
        b = b / 2;
    }
    return x;
}

bool ispalindrome(ll n)
{
    ll rev=0,n1=n;
    while(n1>0)
    {
       rev=rev*10+n1%10;
       n1/=10;
    }
    return (n==rev);
}

void rf()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
}

int fun(int ver) {
    if(vis[ver] == 1)
        return 0;
    int ans = cost[ver-1];
    vis[ver] = 1;
    //cout<<ver<<" "<<vis[ver]<<" "<<"!\n";
    for(auto x: edges[ver]) {
        ans += fun(x);
    }
    return ans;
}

void solve() {
    int n,m;
    cin>>n>>m;
    dp = vt<int> (n+1,-1);
    cost = vt<int> (n);
    outdegree =vt<pii> (n+1);
    edges = vt<vt<int> >(n+1,vt<int>(0));

    for(int i=0; i<n; ++i)
        cin>>cost[i];
    for(int i=0; i<=n; ++i)
        outdegree[i].f = i, outdegree[i].s = 0;
    for(int i=0; i<m; ++i) {
        int from, to;
        cin>>from>>to;
        edges[from].pb(to);
        outdegree[from].s++;
    }

    sort(all(outdegree), [](auto &x, auto &y) { return x.s < y.s || (x.f < y.f && x.s == y.s); });
    reverse(all(outdegree));
    // for(int i=0; i<=n; ++i)
    //     cout<<outdegree[i].f<<" "<<outdegree[i].s<<nl;
    for(int i=0; i<n; ++i) {
        trace1(edges[i].size());
        vis.reset();
        // trace1(vis);
        // cout<<vis[0]<<nl;
        dp[outdegree[i].f] = fun(outdegree[i].f);
    }
    for(int i=1; i<=n; ++i)
        cout<<dp[i]<<" ";
    cout<<nl;
}

int32_t main()
{
    fast;
    //cin.exceptions(cin.failbit);
    rf();
    w(t) 
    {
        solve();
    }
}
