you are given an array of size n (consisting of 0 and 1 only) and k = a1a2 + a2a3 + a3a4 + â€¦ an-1an.
You have to find out how many combinations of the elements of the array will give the sum of products equal to given value k. 
You have to calculate this value modulo 10^6+3.


Soln - The states of the DP are 
-> Position/Index
-> (K - value_till_now)
-> previous element's value

Note : The number of zeros/ ones donot matter  because there is no constraint for the same. Hence it is not a state.

Code - 
//#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//find_by_order(k)  returns iterator to kth element starting from 0;
//order_of_key(k) returns count of elements strictly smaller than k;
//erase,insert same as normal set

//#define      ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)
#define        intmax    INT_MAX
#define        intmin    INT_MIN
#define        nl        "\n"
#define        prt(val)  cout<<val<<"\n"
#define        all(v)    v.begin(),v.end()
#define        vt        vector
#define        trace1(x)                cerr<<#x<<": "<<x<<endl
#define        trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define        trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define        trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define        trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define        trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

typedef       long long int ll;
typedef       long double LD;
typedef       unsigned long long int LL;
typedef       pair<int,int> pii;
typedef       pair<long long int,int> pli;
typedef       pair<int,long long int> pil;
typedef       pair<long long int,long long int> pll;
const int N=1e5+5;
const int mod=1e6+3;
//mt19937 rnd(time(NULL));

/*------Global--------*/
int dp[105][105][2];
/*-----Functions------*/
template<typename T>
void show2d(const vector<vector<T>>& adj)
{
    for(auto x:adj)
    {
        for(auto y:x)
        { 
           cout<<y<<" ";
        }
    cout<<"\n";
    }
}

ll modexp(ll a,ll b,ll mod)
{
    ll x=1;
    while(b)
    {
        if(b&1)
        x = ((x%mod) * (a%mod))%mod;
        a = ((a%mod) * (a%mod))%mod;
        b = b / 2;
    }
    return x;
}

bool ispalindrome(ll n)
{
    ll rev=0,n1=n;
    while(n1>0)
    {
       rev=rev*10+n1%10;
       n1/=10;
    }
    return (n==rev);
}

void rf()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
}

int recursion(int i, int rem, int n, bool prev)
{
    if(rem < 0)
        return 0;
    if(i == (n+1))
    {
        if(rem == 0)
            return 1;
        return 0;
    }
    int op=0;
    if(dp[i][rem][prev] != -1)
        return dp[i][rem][prev]%mod;
    if(prev)
    {
        op = (recursion(i+1, rem-1, n, 1)%mod + recursion(i+1, rem, n, 0)%mod)%mod;           // IF prev is 1 anf current is 1,  only then remaining get reduces by 1.
    }
    else
    {
        op = (recursion(i+1, rem, n, 1)%mod + recursion(i+1, rem, n, 0)%mod)%mod;          
    }
    if(op<0)
        op += mod;
    return dp[i][rem][prev] = op%mod;
}

void solve()
{
    int n,k;
    cin>>n>>k;
    fix(dp,-1);
    cout<<recursion(1,k,n,0)<<nl;
}

int32_t main()
{
    fast;
    //rf();
    w(t) {
        solve();
    }
}
