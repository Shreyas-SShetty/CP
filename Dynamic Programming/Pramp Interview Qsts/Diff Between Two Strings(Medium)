This qst is not in leetcode :)


Given two strings of uppercase letters source and target, list (in string form) a sequence of edits to convert from source to target that uses the least edits possible.

For example, with strings source = "ABCDEFG", and target = "ABDFFGH" we might return: ["A", "B", "-C", "D", "-E", "F", "+F", "G", "+H"

More formally, for each character C in source, we will either write the token C, which does not count as an edit; or write the token -C, which counts as an edit.

Additionally, between any token that we write, we may write +D where D is any letter, which counts as an edit.

At the end, when reading the tokens from left to right, and not including tokens prefixed with a minus-sign, the letters should spell out target (when ignoring plus-signs.)

In the example, the answer of A B -C D -E F +F G +H has total number of edits 4 (the minimum possible), and ignoring subtraction-tokens, spells out A, B, D, F, +F, G, +H which represents the string target.

If there are multiple answers, use the answer that favors removing from the source first.

Constraints:

[time limit] 5000ms
[input] string source
2 ≤ source.length ≤ 12
[input] string target
2 ≤ target.length ≤ 12
[output] array.string


Soln 1- 

In the interview , I came up with this approach(with some hints in the second part) -
--> Find the longest common subsequence, retrace the path in the grid to find the characters of the LCS. 
--> Using three pointer technique, obtain the answer(not hard). 


Soln 2-
 
 It is clear that we need to use backtracking because at any position where there is a mismatch, we can add or delete a character in the first string. 
 But DP is not easy because we need to retrace the path and not the values. 
 Time complexity will be exponential.
 Doesn't pass the last test case.
 
 Code - 
 
#import <iostream>
#import <string>
#import <vector>
using namespace std;

vector<string> is_valid, global;
int min_till_now;


using namespace std;

void minEdits(const string& source, const string& target, 
              int i, int j, int n, int m, int edits)
{
  if(i == n && j == m)
  {
    if(edits < min_till_now)
    {
      min_till_now = edits;
      global = is_valid;
    }
    return;
  }
  if(i==n)
  {
    int travel = (m-j);
    vector<string> old = is_valid;
    if(edits+travel < min_till_now)
    {
      min_till_now = edits + travel;
      while(j<m)
      {
        string temp = "+";
        temp += target[j];
        is_valid.push_back(temp);
        ++j;
      }
      global = is_valid;
    }
    is_valid = old;
    return;
  }
  if(j==m)
  {
    int travel = (n-i);
    vector<string> old = is_valid;
    if(edits+travel < min_till_now)
    {
      min_till_now = edits + travel;
      while(i<n)
      {
        string temp = "-";
        temp += source[i];
        is_valid.push_back(temp);
        ++i;
      }
      global = is_valid;
    }
    is_valid = old;
    return;
  }
  
  if(source[i] == target[j])
  {
    is_valid.push_back(string(1,source[i]));
    minEdits(source, target, 
              i+1, j+1, n, m, edits);
    is_valid.pop_back();
  }
  
  string temp2 = "-";
  temp2 += source[i];
  is_valid.push_back(temp2);
    minEdits(source, target, 
             i+1, j, n, m, edits+1);
  is_valid.pop_back();
  
  string temp1 = "+";
  temp1 += target[j];
  is_valid.push_back(temp1);
   minEdits(source, target, 
            i, j+1, n, m, edits+1);
  is_valid.pop_back(); 
  
}

vector<string> diffBetweenTwoStrings(const string& source, const string& target)
{
	// your code goes here
  min_till_now = 1e9;
  int n = source.length();
  int m = target.length();
  minEdits(source, target, 0, 0, n, m, 0);
  return global;
}

int main() 
{
  vector<string> ans = diffBetweenTwoStrings("abcdefg", "abdffgh");
  for(auto x:ans)
    cout<<x<<" ";
	return 0;
}

