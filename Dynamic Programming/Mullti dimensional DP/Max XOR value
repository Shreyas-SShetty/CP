Given three strings of length 10(contains only 0's and 1's), find the maximum xor value obtainable by performing this opn on any string:
->Shuffle the characters of any string but within itself.

Input - 
Test Case and three strings/tc.
2
0000101011
0001010101
0010010000
1000000010
0001000100
1001000000

Output - 
1111111111
1111110000

Soln - When there are so many choices for optimal arrangement it is better to use DP than greedy.

Code-

//#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//find_by_order(k)  returns iterator to kth element starting from 0;
//order_of_key(k) returns count of elements strictly smaller than k;
//erase,insert same as normal set

//#define      ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)
#define        intmax    INT_MAX
#define        intmin    INT_MIN
#define        nl        "\n"
#define        prt(val)  cout<<val<<"\n"
#define        all(v)    v.begin(),v.end()
#define        vt        vector
#define        trace1(x)                cerr<<#x<<": "<<x<<endl
#define        trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define        trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define        trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define        trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define        trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

typedef       long long int ll;
typedef       long double LD;
typedef       unsigned long long int LL;
typedef       pair<int,int> pii;
typedef       pair<long long int,int> pli;
typedef       pair<int,long long int> pil;
typedef       pair<long long int,long long int> pll;
const int N=1e5+5;
const int mod=1e9+7;
//mt19937 rnd(time(NULL));

/*------Global--------*/
string a,b,c;
int dp[12][12][12][12];
/*-----Functions------*/
template<typename T>
void show2d(const vector<vector<T>>& adj)
{
    for(auto x:adj)
    {
        for(auto y:x)
        { 
           cout<<y<<" ";
        }
    cout<<"\n";
    }
}

ll modexp(ll a,ll b,ll mod)
{
    ll x=1;
    while(b)
    {
        if(b&1)
        x = ((x%mod) * (a%mod))%mod;
        a = ((a%mod) * (a%mod))%mod;
        b = b / 2;
    }
    return x;
}

bool ispalindrome(ll n)
{
    ll rev=0,n1=n;
    while(n1>0)
    {
       rev=rev*10+n1%10;
       n1/=10;
    }
    return (n==rev);
}

void rf()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
}

ll fun(int i, int c1, int c2, int c3)
{
    if(i >= 10)
        return 0;
        
    if(dp[i][c1][c2][c3] != -1)
        return dp[i][c1][c2][c3];
        
    ll op1 = 0, op2 = 0, op3 = 0, op4 = 0, op5 = 0, op6 = 0, op7 = 0, op8 = 0;
    
    if(c1 > 0 && c2 > 0 && c3 > 0)
        op1 = (1<<(9-i)) + fun(i+1, c1-1, c2-1, c3-1);

    if(c1 > 0 && c2 > 0 && (10-i>c3))
        op2 = 0 + fun(i+1, c1-1, c2-1, c3);

    if(c2 > 0 && c3 > 0 && (10-i>c1))
        op3 = 0 + fun(i+1, c1, c2-1, c3-1);

    if(c3 > 0 && c1 > 0 && (10-i>c2))
        op4 = 0 + fun(i+1, c1-1, c2, c3-1);

    if(c1 > 0 && (10-i>c2) && (10-i>c3))
        op5 = (1<<(9-i)) + fun(i+1, c1-1, c2, c3);
    
    if(c2 > 0 && (10-i>c3) && (10-i>c1))
        op6 = (1<<(9-i)) + fun(i+1, c1, c2-1, c3);

    if(c3 > 0 && (10-i>c2) && (10-i>c1))
        op7 = (1<<(9-i)) + fun(i+1, c1, c2, c3-1);

    if((10-i>c2) && (10-i>c3) && (10-i>c1))
    op8 = 0 + fun(i+1, c1, c2, c3);

    return dp[i][c1][c2][c3] = max(op1, max(op2, max(op3, max(op4, max(op5, max(op6, max(op7,op8)))))));
}

int getCount(string str)
{
    int cnt=0;
    for(auto x:str)
        if(x == '1')
            ++cnt;

    return cnt;
}

void solve()
{
    cin>>a>>b>>c;
    ll cnta = getCount(a);
    ll cntb = getCount(b);
    ll cntc = getCount(c);
    trace3(cnta, cntb, cntc);
    fix(dp,-1);
    ll answer = fun(0, cnta, cntb, cntc);
    vector<int> contain;
    while(answer)
    {
        contain.pb(answer%2);
        answer /= 2;
    }
    reverse(all(contain));
    for(auto x:contain)
        cout<<x;
    cout<<nl;
}

int32_t main()
{
    fast;
    //rf();
    w(t)
    {
        solve();
    }
}
