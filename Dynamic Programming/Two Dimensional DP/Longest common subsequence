Return the LCS

We will use bottom up approach;


CODE::

//#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
//#include<boost/multiprecision/cpp_int.hpp>


#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        pii pair<int,int>
#define        pli pair<long,int>
#define        pil pair<int,long>
#define        pll pair<long,long>
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)
#define        mx(a,b,c) max(a,max(b,c))
#define        intmax    INT_MAX
#define        intmin    INT_MIN

using namespace std;
//using boost::multiprecision::cpp_int;


typedef long long ll;
typedef long double LD;
typedef unsigned long long int LL;
const int N=1e5+5;
const int mod=1e9+7;

//////////////////////////////////////////////////////////////
int dp[1001][1001];

void rf()
{
    #ifndef ONLINE_JUDGE
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
    #endif
}
int32_t main()
{
    fast;
    rf();
    string one,two;
    cin>>one>>two;
    one = "0" + one;
    two = "0" + two;
    for(int i=1;i<one.length();++i)
    {
    	for(int j=1;j<two.length();++j)
    	{
    		if(one[i] == two[j])
    			dp[i][j] = dp[i-1][j-1] +1;             // If the two characters of the two strings are same(i.e, one[i] == two[j]), then the current maximum is the maximum till the previous index plus one .
    		else
    			dp[i][j] = max(dp[i][j-1],dp[i-1][j]);   // Else current max is equal to either (i-1,j) and (i,j-1)
    	}
    }
    
    int start = one.length()-1;
    int end = two.length()-1;
    string vec="";
    while(start != 0 && end != 0)               // Retrace the LCS
    {
    	if((one[start] == two[end]) && (dp[start][end] = dp[start-1][end-1]+1))
    	{
    		vec.push_back(one[start]);
    		start-=1;
    		end-=1;
    	}
    	else
    	{
    		if(dp[start][end-1]>=dp[start-1][end])
    		{
    			end -=1;
    		}
    		else
    		{
    			start-=1;
    		}
    	}
    }
	reverse(vec.begin(),vec.end());
	cout<<vec<<"\n";
}
