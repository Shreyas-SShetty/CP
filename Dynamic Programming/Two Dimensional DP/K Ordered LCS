Longest common subsequence possible by changing atmost k numbers in first array.

Code---

/#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
//#include<boost/multiprecision/cpp_int.hpp>


#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        pii pair<int,int>
#define        pli pair<long,int>
#define        pil pair<int,long>
#define        pll pair<long,long>
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)
#define        mx(a,b,c) max(a,max(b,c))
#define        mn(a,b,c) min(a,min(b,c))
#define        intmax    INT_MAX
#define        intmin    INT_MIN

using namespace std;
//using boost::multiprecision::cpp_int;


typedef long long ll;
typedef long double LD;
typedef unsigned long long int LL;
const int N=1e5+5;
const int mod=1e9+7;

//////////////////////////////////////////////////////////////
int n,m,k;
ll first_array[2001],second_array[2001];
int dp[2001][2001][6];
void rf()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
}

int findMaxSubsequenceLength(int i,int j,int spare)
{
    if(i>=n || j>=m)
    return 0;
    if(dp[i][j][spare] != -1)
    return dp[i][j][spare];

    if(first_array[i] == second_array[j])
    return dp[i][j][spare] = 1+(findMaxSubsequenceLength(i+1,j+1,spare));
    if(spare == 0)
    return dp[i][j][spare] = max(findMaxSubsequenceLength(i+1,j,0),findMaxSubsequenceLength(i,j+1,0));
    return dp[i][j][spare] = mx(findMaxSubsequenceLength(i+1,j,spare),findMaxSubsequenceLength(i,j+1,spare),findMaxSubsequenceLength(i+1,j+1,spare-1)+1);
}
int32_t main()
{
    fast;
    rf();
    cin>>n>>m>>k;           //input number of elements in array 1,2 and k.
    for(int i=0;i<n;++i)     //input array 1
    cin>>first_array[i];
    for(int i=0;i<m;++i)     //input array 2. Each number has an unique state in three dimensions
    cin>>second_array[i];
    fix(dp,-1);
    cout<<findMaxSubsequenceLength(0,0,k)<<"\n";
}
