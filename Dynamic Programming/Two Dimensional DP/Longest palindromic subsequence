Return the Longest palindromic subsequence

Intuition : 
-> Start from the left and the right ends.
-> If they are equal , then answer will be 2  + function(start+1,end-1)
-> If they are not equal, then answer will be max(function(start+1,end),function(start,end-1))
-> Base Case - if(start == end) return 1;
-> Use dp table to store intermediate as it has over lapping sub-problems.

Code :

int dp[100][100];
string str;

int fun(int i,int j,int n){
    if(i>j)
        return 0;
    if(dp[i][j] != -1){
        return dp[i][j];
    }
    if(i == j)
        return dp[i][i] = 1;
    if(str[i] == str[j] && j == i+1)
        return dp[i][j] = 2;
    if(str[i] == str[j])
        return dp[i][j] = fun(i+1,j-1,n) + 2;
    return dp[i][j] = max(fun(i+1,j,n),fun(i,j-1,n));
}

int32_t main()
{
    fast;
    rf();
    cin>>str;
    int n = str.length();
    fix(dp,-1);       // memset(dp,sizeof(dp),-1)
    cout<<fun(0,n-1,n)<<"\n";
}
