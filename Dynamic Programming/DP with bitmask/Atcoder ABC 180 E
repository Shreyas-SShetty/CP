Question - https://atcoder.jp/contests/abc180/tasks/abc180_e


Idea - Similar to travelling salesman problem . State of DP is [set of all nodes][current node]. 

Code - 


/*------Global--------*/
vt<array<ll, 3> >points;
vt<vt<ll> >dp;
/*-----Functions------*/

ll computeCost(int i, int j) {
    return ( abs(points[i-1][0] - points[j-1][0]) + abs(points[i-1][1] - points[j-1][1]) + 
             max(0LL, points[j-1][2] - points[i-1][2]) );
}

ll go(int curr, int n, ll vis, int par) {
    if(vis == (pow(2, n) - 1))
        return computeCost(curr, 1);
    if(dp[vis][curr] != -1)
        return dp[vis][curr];
    ll minCost = 1e9;
    for(int i=1; i<=n; ++i) {
        if(i == curr)
            continue;
        if(vis & (1<<(i-1)))
            continue;
        minCost = min(minCost, computeCost(curr, i) + go(i, n, vis | (1<<(i-1)), curr));
    }
    return (dp[vis][curr] = minCost);
}

void solve() {
    int n;
    cin >> n;
    points = vt<array<ll, 3> >(n);
    dp = vt<vt<ll> > (N,vt<ll>(n+1,-1));
    for(int i=0; i<n; ++i)
        cin >> points[i][0] >> points[i][1] >> points[i][2] ;
    cout << go(1, n, 1, -1) << nl;
    //cout<<0<<nl;
}

//Thought  abt edge cases (n == 1??????????????)

int32_t main()
{
    fast;
    //cin.exceptions(cin.failbit);
   // rf();
   // w(t) 
    {
        solve();
    }
}
