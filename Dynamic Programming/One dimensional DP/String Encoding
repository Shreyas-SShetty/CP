Alice and Bob are planning to send encrypted messages to each other. Alice has decided to assign 'A' to code 1, 'B' to the code 2,…… 'Z' to code 26. Now he wonders given an encrypted message how many different decoding they can form.

Input Format
The first line consists of an integral value denoting number of test cases 't'. Then 't' lines follows each containing encrypted string of length 'n'.

Constraints
1<=n<=5000

Output Format
In each line output the required answer.

Sample Input
1
25114
Sample Output
6
Explanation
25114 can be decoded as 'BEAN','BEAAD', 'YAAD', 'YAN', 'YKD', 'BEKD'.



Code :::

#include<bits/stdc++.h>

using namespace std;



//Check if 1<=n<=26.

bool isValid(int n)

{

    if(n >= 1 && n <= 26)

        return true;

    return false;

}



//i - current index

//n - length of the string

int permute(string str, int i, int n, int* dp)

{

    //If the string has been traversed

    //completely return 1

    //Because it is an unique combination

    if (i == n)

        return 1;



    //If the result of this index has been

    //previously computed , return dp[i].

    if (dp[i] != -1)

        return dp[i];

    

    dp[i] = 0;



    //No character can be formed by '0'

    //since A->'1' and Z->'26'.

    if (str[i] == '0')

    {

        return dp[i];

    }

    

    //Atleast one character can be formed

    //by numbers in range [1,9]

    dp[i] = permute(str,i+1,n,dp);

    

    //If the number formed by next two characters is

    //in the range [10,26] it forms a valid character

    //in the range [J,Z].

    if((i<n-1) && (isValid( (str[i]-'0')*10 + (str[i+1]-'0') )))

    {

        dp[i] += permute(str,i+2,n,dp);

    }

    return dp[i];

}



int main()

{

    int dp[5001];

    //Initialize the dp array by -1.

    memset(dp,-1,sizeof(dp));

    string str = "2314";

    int n = str.length();

    cout << permute(str,0,n,dp) << "\n";

}

