Given an array of n numbers find the longest increasing subsequence

Top Down Approach--
Explanation--If we represent a number by only its index then it DOESNOT define an unique state because the same number might be a part of 
             more than one subsequence. Hence the two states are its index and the previous number of the current subsequence.


Code-

//#pragma GCC optimize "trapv"
#include<bits/stdc++.h>
//#include<boost/multiprecision/cpp_int.hpp>


#define        fast ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define        f first
#define        s second
#define        pb push_back
#define        eb emplace_back
#define        pii pair<int,int>
#define        pli pair<long,int>
#define        pil pair<int,long>
#define        pll pair<long,long>
#define        mp  make_pair
#define        forn(i,n) for(int i=0;i<n;++i)
#define        show(b) for(auto const&x: b) cout<<x<<" "
#define        sshow(b) for(auto x:b) cout<<x<<" "
#define        fix(b,val)   memset(b,val,sizeof(b))
#define        pill(b,n,v)  fill(b,b+n,v)
#define        itn          int
#define        w(t)     int t;cin>>t;while(t--)
#define        mx(a,b,c) max(a,max(b,c))
#define        mn(a,b,c) min(a,min(b,c))
#define        intmax    INT_MAX
#define        intmin    INT_MIN

using namespace std;
//using boost::multiprecision::cpp_int;


typedef long long ll;
typedef long double LD;
typedef unsigned long long int LL;
const int N=1e5+5;
const int mod=1e9+7;

//////////////////////////////////////////////////////////////////
int dp[1009][1009];
int a[1005];

void rf()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
}

int fun(int i,int j,int prev)
{
    if(i>=j)
        return 0;
    if(dp[i][prev+1] != -1)
        return dp[i][prev+1];
    int taken =0;
    int nottaken=0;
    if(a[i] > prev)
        taken = 1+fun(i+1,j,a[i]);     //If the current number is greater than the previous  number then always include it.
    nottaken = fun(i+1,j,prev);         //We anyways want to exclude the current number.
    return dp[i][prev+1]= max(taken,nottaken);
}
int32_t main()
{
    fast;
   // rf();
    fix(dp,-1);
    w(t)
    {
        itn n;
        cin>>n;
        forn(i,n)
        cin>>a[i];
        cout<<fun(0,n,-1)<<"\n";
        fix(dp,-1);
    }
    return 0;
}
